use ds_rs::queue::Queue;

#[test]
fn queue_test() {
    let mut q: Queue<&str> = Queue::new(10);
    q.enq("v1").unwrap();
    assert_eq!(q.is_empty(), false);
    assert_eq!(q.is_full(), false);
    assert_eq!(q.capacity(), 10);
    assert_eq!(q.size(), 1);
    assert_eq!(q.tail().unwrap(), "v1");
    assert_eq!(q.head().unwrap(), "v1");
    q.enq("v2").unwrap();
    assert_eq!(q.is_empty(), false);
    assert_eq!(q.is_full(), false);
    assert_eq!(q.capacity(), 10);
    assert_eq!(q.size(), 2);
    assert_eq!(q.tail().unwrap(), "v1");
    assert_eq!(q.head().unwrap(), "v2");
    q.deq().unwrap();
    assert_eq!(q.is_empty(), false);
    assert_eq!(q.is_full(), false);
    assert_eq!(q.capacity(), 10);
    assert_eq!(q.size(), 1);
    assert_eq!(q.tail().unwrap(), "v2");
    assert_eq!(q.head().unwrap(), "v2");
    q.deq().unwrap();
    assert_eq!(q.deq(), Err(()));
    assert_eq!(q.is_empty(), true);
    assert_eq!(q.is_full(), false);
    assert_eq!(q.capacity(), 10);
    assert_eq!(q.size(), 0);
    assert_eq!(q.tail(), &None);
    assert_eq!(q.head(), &None);
    q.enq("1").unwrap();
    q.enq("2").unwrap();
    q.enq("3").unwrap();
    q.enq("4").unwrap();
    q.enq("5").unwrap();
    q.enq("6").unwrap();
    q.enq("7").unwrap();
    q.enq("8").unwrap();
    q.enq("9").unwrap();
    q.enq("10").unwrap();
    assert_eq!(q.enq("11"), Err(()));
    assert_eq!(q.is_empty(), false);
    assert_eq!(q.is_full(), true);
    assert_eq!(q.capacity(), 10);
    assert_eq!(q.size(), 10);
    assert_eq!(q.tail().unwrap(), "1");
    assert_eq!(q.head().unwrap(), "10");
    q.deq_all();
    assert_eq!(q.is_empty(), true);
    assert_eq!(q.is_full(), false);
    assert_eq!(q.capacity(), 10);
    assert_eq!(q.size(), 0);
    assert_eq!(q.tail(), &None);
    assert_eq!(q.head(), &None);
}
